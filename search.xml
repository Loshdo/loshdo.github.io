<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/03/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Python 入门自学文档</title>
    <url>/2022/03/16/Python-%E5%85%A5%E9%97%A8%E8%87%AA%E5%AD%A6%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h1 id="Python-入门自学文档"><a href="#Python-入门自学文档" class="headerlink" title="Python 入门自学文档"></a>Python 入门自学文档</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>Python 是一种易于学习又功能强大的编程语言。它提供了高效的高级数据结构，还能简单有效地面向对象编程。Python 优雅的语法和动态类型，以及解释型语言的本质，使它成为多数平台上写脚本和快速开发应用的理想语言。</li>
</ul>
<span id="more"></span>

<ul>
<li><p>Python 解释器及丰富的标准库，提供了适用于各个主要系统平台的源码或机器码，这些可以到 <a href="https://www.python.org/">Python 官网</a>免费获取，并可自由地分发。许多免费的第三方 Python 模块、程序、工具和它们的文档，也能在这个网站上找到对应内容或链接。</p>
</li>
<li><p>Python 解释器易于扩展，可以使用 C 或 C++（或者其他可以通过 C 调用的语言）扩展新的功能和数据类型。Python 也可用于可定制化软件中的扩展程序语言。</p>
</li>
<li><p>有关标准的对象和模块，请参阅 <a href="https://docs.python.org/zh-cn/3/library/index.html#library-index">Python 标准库</a>。<a href="https://docs.python.org/zh-cn/3/reference/index.html#reference-index">Python 语言参考手册</a> 提供了更正式的语言定义。想要编写 C 或者 C++ 扩展可以参考 <a href="https://docs.python.org/zh-cn/3/extending/index.html#extending-index">扩展和嵌入 Python 解释器</a> 和 <a href="https://docs.python.org/zh-cn/3/c-api/index.html#c-api-index">Python&#x2F;C API 参考手册</a>。另外还有不少书籍深入讲解 Python。</p>
<p><strong><em>注：本人自学参考视频 <a href="https://www.bilibili.com/video/BV1vA411b7Rn?p=11&spm_id_from=pageDriver">b 站求知学堂</a>，<a href="https://www.runoob.com/python3/python3-tutorial.html">Python3 菜鸟教程</a> 以及 <a href="https://docs.python.org/zh-cn/3/">Python 中文开发文档 3.9.2</a></em></strong></p>
</li>
</ul>
<p><strong>Python 安装与使用待有空更新</strong></p>
<hr>
<h1 id="Python3-基础语法"><a href="#Python3-基础语法" class="headerlink" title="Python3 基础语法"></a>Python3 基础语法</h1><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>默认情况下，Python 3 源码文件以 <strong>UTF-8</strong> 编码，所有字符串都是 unicode 字符串。 当然你也可以为源码文件指定不同的编码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: cp-1252 -*-</span><br></code></pre></td></tr></table></figure>

<h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul>
<li>第一个字符必须是字母表中字母或下划线 <strong>_</strong> 。</li>
<li>标识符的其他的部分由字母、数字和下划线组成。</li>
<li>标识符对大小写敏感。</li>
</ul>
<p>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。</p>
<hr>
<h2 id="python-保留字"><a href="#python-保留字" class="headerlink" title="python 保留字"></a>python 保留字</h2><p>保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> keyword<br><span class="hljs-meta">&gt;&gt;&gt; </span>keyword.kwlist<br>[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>, <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;as&#x27;</span>, <span class="hljs-string">&#x27;assert&#x27;</span>, <span class="hljs-string">&#x27;break&#x27;</span>, <span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;continue&#x27;</span>, <span class="hljs-string">&#x27;def&#x27;</span>, <span class="hljs-string">&#x27;del&#x27;</span>, <span class="hljs-string">&#x27;elif&#x27;</span>, <span class="hljs-string">&#x27;else&#x27;</span>, <span class="hljs-string">&#x27;except&#x27;</span>, <span class="hljs-string">&#x27;finally&#x27;</span>, <span class="hljs-string">&#x27;for&#x27;</span>, <span class="hljs-string">&#x27;from&#x27;</span>, <span class="hljs-string">&#x27;global&#x27;</span>, <span class="hljs-string">&#x27;if&#x27;</span>, <span class="hljs-string">&#x27;import&#x27;</span>, <span class="hljs-string">&#x27;in&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;lambda&#x27;</span>, <span class="hljs-string">&#x27;nonlocal&#x27;</span>, <span class="hljs-string">&#x27;not&#x27;</span>, <span class="hljs-string">&#x27;or&#x27;</span>, <span class="hljs-string">&#x27;pass&#x27;</span>, <span class="hljs-string">&#x27;raise&#x27;</span>, <span class="hljs-string">&#x27;return&#x27;</span>, <span class="hljs-string">&#x27;try&#x27;</span>, <span class="hljs-string">&#x27;while&#x27;</span>, <span class="hljs-string">&#x27;with&#x27;</span>, <span class="hljs-string">&#x27;yield&#x27;</span>]<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="Python-中的注释"><a href="#Python-中的注释" class="headerlink" title="Python 中的注释"></a>Python 中的注释</h2><p><strong>Python 中单行注释以“ # ” 开头，实例如下：</strong>(<em>实例全以 python3.0 以上版本为准</em>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-comment"># 第一个注释</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Hello, Python!&quot;</span>) <span class="hljs-comment"># 第二个注释</span><br></code></pre></td></tr></table></figure>

<p>执行以上代码，输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">Hello, Python!<br></code></pre></td></tr></table></figure>

<p>多行注释可以用多个 <strong>#</strong> 号，还有 <strong>‘’’</strong> 和 **”””**：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-comment"># 第一个注释</span><br><span class="hljs-comment"># 第二个注释</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">第三注释</span><br><span class="hljs-string">第四注释</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">第五注释</span><br><span class="hljs-string">第六注释</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Hello, Python!&quot;</span>)<br></code></pre></td></tr></table></figure>

<p>执行以上代码，输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">Hello, Python<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h2><p>python 最具特色的就是使用缩进来表示代码块，不需要使用大括号 <strong>{}</strong> 。</p>
<p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;True&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;False&quot;</span>)<br></code></pre></td></tr></table></figure>

<p>执行以上代码，输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure>

<p>以下代码最后一行语句缩进数的空格数不一致，会导致运行错误：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Answer&quot;</span>)<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;True&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Answer&quot;</span>)<br>  <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;False&quot;</span>)    <span class="hljs-comment"># 缩进不一致，会导致运行错误</span><br></code></pre></td></tr></table></figure>

<p>则显示 <strong>IndentationError: unindent does not match any outer indentation level</strong></p>
<p><img src="C:\Users\Qing\AppData\Roaming\Typora\typora-user-images\image-20210405234302483.png" alt="image-20210405234302483"></p>
<p><strong>若不同的代码块的语句缩进不同</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-literal">True</span>:<br>    	<span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;True&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;False&quot;</span>)<br></code></pre></td></tr></table></figure>

<p>执行以上代码，输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Answer&quot;</span>)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;True&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Answer&quot;</span>)<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;False&quot;</span>)<br></code></pre></td></tr></table></figure>

<p>执行以上代码，输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">Answer<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure>

<p><strong>则不会导致运行错误</strong></p>
<hr>
<h2 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h2><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">total = item_one + \<br>        item_two + \<br>        item_three<br></code></pre></td></tr></table></figure>

<p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">total = [<span class="hljs-string">&#x27;item_one&#x27;</span>, <span class="hljs-string">&#x27;item_two&#x27;</span>, <span class="hljs-string">&#x27;item_three&#x27;</span>,<br>        <span class="hljs-string">&#x27;item_four&#x27;</span>, <span class="hljs-string">&#x27;item_five&#x27;</span>]<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="数字-Number-类型"><a href="#数字-Number-类型" class="headerlink" title="数字(Number)类型"></a>数字(Number)类型</h2><p>python 中数字有四种类型：整数、布尔型、浮点数和复数。</p>
<ul>
<li><strong>int</strong> (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li>
<li><strong>bool</strong> (布尔), 如 True。</li>
<li><strong>float</strong> (浮点数), 如 1.23、3E-2</li>
<li><strong>complex</strong> (复数), 如 1 + 2j、 1.1 + 2.2j</li>
</ul>
<hr>
<h2 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h2><ul>
<li>python 中单引号和双引号使用完全相同。</li>
<li>使用三引号(‘’’或”””)可以指定一个多行字符串。</li>
<li>转义符 ‘&#39;</li>
<li>反斜杠可以用来转义，使用 r 可以让反斜杠不发生转义。。 如 r”this is a line with \n” 则\n 会显示，并不是换行。</li>
<li>按字面意义级联字符串，如”this “ “is “ “string”会被自动转换为 this is string。</li>
<li>字符串可以用 + 运算符连接在一起，用 * 运算符重复。</li>
<li>Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。</li>
<li>Python 中的字符串不能改变。</li>
<li>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</li>
<li>字符串的截取的语法格式如下：<strong>变量[头下标:尾下标:步长]</strong></li>
</ul>
<p><strong>例一：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">word = <span class="hljs-string">&#x27;字符串&#x27;</span><br>sentence = <span class="hljs-string">&quot;这是一个句子。&quot;</span><br>paragraph = <span class="hljs-string">&quot;&quot;&quot;这是一个段落，</span><br><span class="hljs-string">可以由多行组成&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(word)<br><span class="hljs-built_in">print</span>(sentence)<br><span class="hljs-built_in">print</span>(paragraph)<br></code></pre></td></tr></table></figure>

<p>执行以上代码，输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">字符串<br>这是一个句子。<br>这是一个段落，<br>可以由多行组成<br></code></pre></td></tr></table></figure>

<p><strong>例二:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>=<span class="hljs-string">&#x27;Runoob&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)                 <span class="hljs-comment"># 输出字符串</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>])           <span class="hljs-comment"># 输出第一个到倒数第二个的所有字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>])              <span class="hljs-comment"># 输出字符串第一个字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>])            <span class="hljs-comment"># 输出从第三个开始到第五个的字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">2</span>:])             <span class="hljs-comment"># 输出从第三个开始后的所有字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>])          <span class="hljs-comment"># 输出从第二个开始到第五个且每隔两个的字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span> * <span class="hljs-number">2</span>)             <span class="hljs-comment"># 输出字符串两次</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span> + <span class="hljs-string">&#x27;你好&#x27;</span>)         <span class="hljs-comment"># 连接字符串</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------------------------------&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello\nrunoob&#x27;</span>)      <span class="hljs-comment"># 使用反斜杠(\)+n转义特殊字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">r&#x27;hello\nrunoob&#x27;</span>)     <span class="hljs-comment"># 在字符串前面添加一个 r，表示原始字符串，不会发生转义</span><br></code></pre></td></tr></table></figure>

<p>执行以上代码，输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">Runoob<br>Runoo<br>R<br>noo<br>noob<br>uo<br>RunoobRunoob<br>Runoob你好<br>------------------------------<br>hello<br>runoob<br>hello\nrunoob<br></code></pre></td></tr></table></figure>

<p>**<em>这里的 r 指 raw，即 raw string，会自动将反斜杠转义</em>**，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)       <span class="hljs-comment"># 输出空行</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">r&#x27;\n&#x27;</span>)      <span class="hljs-comment"># 输出 \n</span><br>\n<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2><p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p>
<p>空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p>
<p><strong>记住：</strong>空行也是程序代码的一部分。</p>
<hr>
<h2 id="等待用户输入"><a href="#等待用户输入" class="headerlink" title="等待用户输入"></a>等待用户输入</h2><p>执行下面的程序在按回车键后就会等待用户输入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\n\n按下 enter 键后退出。&quot;</span>)<br></code></pre></td></tr></table></figure>

<p><strong><em>注：以上代码中 ，”\n\n”在结果输出前会输出两个新的空行。一旦用户按下 enter 键时，程序将退出。</em></strong></p>
<hr>
<h2 id="同一行显示多条语句"><a href="#同一行显示多条语句" class="headerlink" title="同一行显示多条语句"></a>同一行显示多条语句</h2><p>Python 可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys; x = <span class="hljs-string">&#x27;runoob&#x27;</span>; sys.stdout.write(x + <span class="hljs-string">&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure>

<p>执行脚本以上代码，输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">runoob<br></code></pre></td></tr></table></figure>

<p>使用交互式命令行执行，输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">runoob<br><span class="hljs-number">7</span><br></code></pre></td></tr></table></figure>

<p><strong><em>此处的 7 表示字符数。</em></strong></p>
<hr>
<h2 id="多个语句构成代码组"><a href="#多个语句构成代码组" class="headerlink" title="多个语句构成代码组"></a>多个语句构成代码组</h2><p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p>
<p>像 if、while、def 和 class 这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p>
<p>我们将首行及后面的代码组称为一个子句(clause)。</p>
<p>如下实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> expression :<br>   suite<br><span class="hljs-keyword">elif</span> expression :<br>   suite<br><span class="hljs-keyword">else</span> :<br>   suite<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="print-输出"><a href="#print-输出" class="headerlink" title="print 输出"></a>print 输出</h2><p><strong>print</strong> 默认输出是换行的，如果要实现不换行需要在变量末尾加上 **end&#x3D;””**：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">x=<span class="hljs-string">&quot;a&quot;</span><br>y=<span class="hljs-string">&quot;b&quot;</span><br><span class="hljs-comment"># 换行输出</span><br><span class="hljs-built_in">print</span>( x )<br><span class="hljs-built_in">print</span>( y )<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---------&#x27;</span>)<br><span class="hljs-comment"># 不换行输出</span><br><span class="hljs-built_in">print</span>( x, end=<span class="hljs-string">&quot; &quot;</span> )<br><span class="hljs-built_in">print</span>( y, end=<span class="hljs-string">&quot; &quot;</span> )<br><span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure>

<p>执行以上代码，输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a<br>b<br>---------<br>a b<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="import-与-from…import"><a href="#import-与-from…import" class="headerlink" title="import 与 from…import"></a>import 与 from…import</h2><p>在 python 用 <strong>import</strong> 或者 <strong>from…import</strong> 来导入相应的模块。</p>
<p>将整个模块(somemodule)导入，格式为： <strong>import somemodule</strong></p>
<p>从某个模块中导入某个函数,格式为： <strong>from somemodule import somefunction</strong></p>
<p>从某个模块中导入多个函数,格式为： <strong>from somemodule import firstfunc, secondfunc, thirdfunc</strong></p>
<p>将某个模块中的全部函数导入，格式为： <strong>from somemodule import *</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys				<span class="hljs-comment">#导入sys模块</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;================Python import mode==========================&#x27;</span>)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;命令行参数为:&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sys.argv:<br>    <span class="hljs-built_in">print</span> (i)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;\n python 路径为&#x27;</span>,sys.path)<br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv,path				<span class="hljs-comment">#导入特定的成员</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;================python from import===================================&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;path:&#x27;</span>,path) <span class="hljs-comment"># 因为已经导入path成员，所以此处引用时不需要加sys.path</span><br></code></pre></td></tr></table></figure>

<hr>
<h2 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h2><p>很多程序可以执行一些操作来查看一些基本信息，Python 可以使用-h 参数查看各参数帮助信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">$ python -h<br>usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...<br>Options <span class="hljs-keyword">and</span> arguments (<span class="hljs-keyword">and</span> corresponding environment variables):<br>-c cmd : program passed <span class="hljs-keyword">in</span> <span class="hljs-keyword">as</span> string (terminates option <span class="hljs-built_in">list</span>)<br>-d     : debug output <span class="hljs-keyword">from</span> parser (also PYTHONDEBUG=x)<br>-E     : ignore environment variables (such <span class="hljs-keyword">as</span> PYTHONPATH)<br>-h     : <span class="hljs-built_in">print</span> this <span class="hljs-built_in">help</span> message <span class="hljs-keyword">and</span> exit<br><br>[ etc. ]<br></code></pre></td></tr></table></figure>

<p><strong><em>我们在使用脚本形式执行 Python 时，可以接收命令行输入的参数，具体使用可以参照 <a href="https://www.runoob.com/python3/python3-command-line-arguments.html">Python 3 命令行参数</a>。</em></strong></p>
<p><img src="https://s3.bmp.ovh/imgs/2022/03/45e62fbe5b5b4e2d.png"></p>
]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
