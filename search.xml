<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown入门文档</title>
    <url>/2022/03/21/Markdown%E5%85%A5%E9%97%A8%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h2 id="Markdown-入门文档"><a href="#Markdown-入门文档" class="headerlink" title="Markdown 入门文档"></a>Markdown 入门文档</h2><hr>
<h3 id="Markdown-介绍："><a href="#Markdown-介绍：" class="headerlink" title="Markdown 介绍："></a>Markdown 介绍：</h3><ul>
<li><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p>
</li>
<li><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p>
</li>
<li><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p>
</li>
<li><p>Markdown 编写的文档后缀为 .md， .markdown。</p>
</li>
</ul>
<span id="more"></span>

<hr>
<h4 id="Markdown-应用："><a href="#Markdown-应用：" class="headerlink" title="Markdown 应用："></a>Markdown 应用：</h4><ul>
<li><p>Markdown 能被使用来撰写电子书，如：Gitbook。</p>
</li>
<li><p>当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、简书、reddit、Diaspora、Stack Exchange、OpenStreetMap 、SourceForge 等。</p>
</li>
</ul>
<hr>
<h4 id="Markdown-编译器："><a href="#Markdown-编译器：" class="headerlink" title="Markdown 编译器："></a>Markdown 编译器：</h4><ul>
<li><a href="https://www.typora.net/">Typora</a><br>优点：中文，简洁<br>缺点：收费，没有第三方插件</li>
<li><a href="https://obsidian.md/">Obsidian</a><br>有点：免费，有第三方插件，可视化编辑<br>缺点：复杂</li>
<li><a href="https://www.jianshu.com/">简书</a></li>
<li><a href="https://code.visualstudio.com/">VSCode</a></li>
</ul>
<hr>
<h3 id="1-Markdown-段落格式"><a href="#1-Markdown-段落格式" class="headerlink" title="1. Markdown 段落格式"></a>1. Markdown 段落格式</h3><hr>
<h4 id="1-1-标题"><a href="#1-1-标题" class="headerlink" title="1.1 标题"></a>1.1 标题</h4><ul>
<li>使用 # 号标记<br>使用 <code>#</code> 号可表示 1-6 级标题，一级标题对应一个 <code>#</code> 号，二级标题对应两个 <code>#</code> 号，以此类推。</li>
</ul>
<figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean"># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题<br></code></pre></td></tr></table></figure>

<hr>
<h4 id="1-2-字体"><a href="#1-2-字体" class="headerlink" title="1.2 字体"></a>1.2 字体</h4><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-strong">*斜体文本*</span><br><span class="hljs-emphasis">_斜体文本_</span><br><span class="hljs-strong">**粗体文本**</span><br><span class="hljs-emphasis">__粗体文本__</span><br><span class="hljs-strong">***粗斜体文本**</span>*<br><span class="hljs-emphasis">___粗斜体文本__</span>_<br></code></pre></td></tr></table></figure>

<ul>
<li><p>效果如下所示：</p>
<p><em>斜体文本</em><br><em>斜体文本</em><br><strong>粗体文本</strong><br><strong>粗体文本</strong><br><strong><em>粗斜体文本</em></strong><br><strong><em>粗斜体文本</em></strong></p>
</li>
</ul>
<hr>
<h4 id="1-3-分隔线"><a href="#1-3-分隔线" class="headerlink" title="1.3 分隔线"></a>1.3 分隔线</h4><ul>
<li>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">***</span><br><span class="hljs-string">*</span> <span class="hljs-string">*</span> <span class="hljs-string">*</span><br><span class="hljs-string">*****</span><br><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-bullet">-</span> <span class="hljs-bullet">-</span><br><span class="hljs-string">----------</span><br></code></pre></td></tr></table></figure>

<ul>
<li>效果如下所示：</li>
</ul>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<hr>
<h4 id="1-4-删除线"><a href="#1-4-删除线" class="headerlink" title="1.4 删除线"></a>1.4 删除线</h4><ul>
<li>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线 <code>~~</code> 即可，实例如下：</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">RUNOOB<span class="hljs-selector-class">.COM</span><br>GOOGLE<span class="hljs-selector-class">.COM</span><br>~~BAIDU.COM~~<br></code></pre></td></tr></table></figure>

<ul>
<li>效果如下所示：<br>RUNOOB.COM<br>GOOGLE.COM<br><del>BAIDU.COM</del></li>
</ul>
<hr>
<h4 id="1-5-下划线"><a href="#1-5-下划线" class="headerlink" title="1.5 下划线"></a>1.5 下划线</h4><ul>
<li>下划线可以通过 HTML 的 <code>&lt;u&gt;</code> 标签来实现：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>带下划线文本<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><u>带下划线文本</u></p>
<hr>
<h3 id="2-Markdown-列表"><a href="#2-Markdown-列表" class="headerlink" title="2. Markdown 列表"></a>2. Markdown 列表</h3><hr>
<h4 id="2-1-有序列表和无序列表"><a href="#2-1-有序列表和无序列表" class="headerlink" title="2.1 有序列表和无序列表"></a>2.1 有序列表和无序列表</h4><ul>
<li>Markdown 支持有序列表和无序列表。</li>
<li>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 第一项<br><br><span class="hljs-bullet">+</span> 第二项<br><br><span class="hljs-bullet">-</span> 第三项<br></code></pre></td></tr></table></figure>

<ul>
<li><p>效果如下所示：</p>
</li>
<li><p>第一项</p>
</li>
</ul>
<ul>
<li>第二项</li>
</ul>
<ul>
<li>第三项</li>
</ul>
<p>有序列表使用数字并加上 . 号来表示，如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项<br><span class="hljs-bullet">2.</span> 第二项<br><span class="hljs-bullet">3.</span> 第三项<br></code></pre></td></tr></table></figure>

<ul>
<li>效果如下所示：</li>
</ul>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
<hr>
<h4 id="2-2-列表嵌套"><a href="#2-2-列表嵌套" class="headerlink" title="2.2 列表嵌套"></a>2.2 列表嵌套</h4><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 第一项：<br><span class="hljs-bullet">    -</span> 第一项嵌套的第一个元素<br><span class="hljs-bullet">    -</span> 第一项嵌套的第二个元素<br><span class="hljs-bullet">2.</span> 第二项：<br><span class="hljs-bullet">    -</span> 第二项嵌套的第一个元素<br><span class="hljs-bullet">    -</span> 第二项嵌套的第二个元素<br></code></pre></td></tr></table></figure>

<ol>
<li>第一项：<ul>
<li>第一项嵌套的第一个元素</li>
<li>第一项嵌套的第二个元素</li>
</ul>
</li>
<li>第二项：<ul>
<li>第二项嵌套的第一个元素</li>
<li>第二项嵌套的第二个元素</li>
</ul>
</li>
</ol>
<hr>
<h3 id="3-Markdown-代码"><a href="#3-Markdown-代码" class="headerlink" title="3. Markdown 代码"></a>3. Markdown 代码</h3><hr>
<h4 id="3-1-段落代码"><a href="#3-1-段落代码" class="headerlink" title="3.1 段落代码"></a>3.1 段落代码</h4><ul>
<li>如果是段落上的一个函数或片段的代码可以用反引号把它包起来**`内容<code>**，例如： \</code>printf()&#96; 函数</li>
<li>效果如下所示：</li>
</ul>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><code class="hljs autohotkey">`printf()` 函数<br></code></pre></td></tr></table></figure>

<hr>
<h4 id="3-2-代码区块-多行代码"><a href="#3-2-代码区块-多行代码" class="headerlink" title="3.2 代码区块(多行代码)"></a>3.2 代码区块(多行代码)</h4><ul>
<li>代码区块使用可以用 <strong>`&#96;&#96;内容&#96;&#96;&#96;</strong> 包裹一段代码，并指定一种语言（也可以不指定）实例如下：</li>
</ul>
<p>`&#96;&#96;<br>public class hello {<br> public static void main(String[] args) {<br> System.out.println(“Hello,World”);<br> }<br>}<br>`&#96;&#96;</p>
<ul>
<li>效果如下所示：</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">hello</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;Hello,World&quot;</span>);<br>	 &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<hr>
<h3 id="4-Markdown-链接"><a href="#4-Markdown-链接" class="headerlink" title="4. Markdown 链接"></a>4. Markdown 链接</h3><hr>
<h4 id="链接基础"><a href="#链接基础" class="headerlink" title="链接基础"></a>链接基础</h4><figure class="highlight scss"><table><tr><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-attr">[链接名称]</span>(链接地址)<br>或者<br>&lt;链接地址&gt;<br></code></pre></td></tr></table></figure>

<p>列如：<br><code>这是一个链接 [菜鸟教程](https://www.runoob.com)</code></p>
<ul>
<li>效果如下所示：<br>这是一个链接 <a href="https://www.runoob.com/">菜鸟教程</a><br>或者直接使用链接地址：<br><a href="https://www.runoob.com/">https://www.runoob.com</a></li>
</ul>
<hr>
<h4 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h4><figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less">这个链接用 <span class="hljs-number">1</span> 作为网址变量 <span class="hljs-selector-attr">[Google]</span><span class="hljs-selector-attr">[1]</span><br>这个链接用 <span class="hljs-selector-tag">runoob</span> 作为网址变量 <span class="hljs-selector-attr">[Runoob]</span><span class="hljs-selector-attr">[runoob]</span><br>然后在文档的结尾为变量赋值（网址）<br><span class="hljs-selector-attr">[1]</span>: <span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//www.google.com/</span><br><span class="hljs-selector-attr">[runoob]</span>: <span class="hljs-selector-tag">http</span>:<span class="hljs-comment">//www.runoob.com/</span><br></code></pre></td></tr></table></figure>

<ul>
<li>效果如下所示：</li>
</ul>
<p>这个链接用 1 作为网址变量 [Google][1]<br>这个链接用 runoob 作为网址变量 [Runoob][runoob]<br>然后在文档的结尾为变量赋值（网址）<br>[1]: <a href="http://www.google.com/">http://www.google.com/</a><br>[runoob]: <a href="http://www.runoob.com/">http://www.runoob.com/</a></p>
<hr>
<h3 id="5-Markdown-图片"><a href="#5-Markdown-图片" class="headerlink" title="5. Markdown 图片"></a>5. Markdown 图片</h3><hr>
<ul>
<li>Markdown 图片语法格式如下：</li>
</ul>
<figure class="highlight scss"><table><tr><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[alt 属性文本]</span>(图片地址)<br>!<span class="hljs-selector-attr">[alt 属性文本]</span>(图片地址 &quot;可选标题&quot;)<br></code></pre></td></tr></table></figure>

<ul>
<li>效果如下所示：<br><img src="https://i.bmp.ovh/imgs/2022/03/6330504b8dafa68b.jpg" alt="星空"><br><img src="https://i.bmp.ovh/imgs/2022/03/6330504b8dafa68b.jpg" alt="星空" title="可选标题--星空"></li>
</ul>
<hr>
<h3 id="6-Markdown-表格"><a href="#6-Markdown-表格" class="headerlink" title="6. Markdown 表格"></a>6. Markdown 表格</h3><hr>
<h4 id="表格基础"><a href="#表格基础" class="headerlink" title="表格基础"></a>表格基础</h4><ul>
<li>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。语法格式如下：</li>
</ul>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 表头 </span>|<span class="hljs-string"> 表头 </span>|<br>|<span class="hljs-string"> ---- </span>|<span class="hljs-string"> ---- </span>|<br>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br></code></pre></td></tr></table></figure>

<ul>
<li>效果如下所示：</li>
</ul>
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody><tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
</tbody></table>
<hr>
<h4 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h4><p><strong>我们可以设置表格的对齐方式：</strong></p>
<ul>
<li>-: 设置内容和标题栏居右对齐。</li>
<li>:- 设置内容和标题栏居左对齐。</li>
<li>:-: 设置内容和标题栏居中对齐。</li>
</ul>
<p>实例如下：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"> 左对齐 </span>|<span class="hljs-string"> 右对齐 </span>|<span class="hljs-string"> 居中对齐 </span>|<br>|<span class="hljs-string"> :-----</span>|<span class="hljs-string"> ----: </span>|<span class="hljs-string"> :----: </span>|<br>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br></code></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中对齐</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格 123123</td>
<td align="right">单元格 123123</td>
<td align="center">单元格 123123</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="right">单元格</td>
<td align="center">单元格</td>
</tr>
</tbody></table>
<hr>
<h3 id="7-Markdown-高级（待更新）"><a href="#7-Markdown-高级（待更新）" class="headerlink" title="7. Markdown 高级（待更新）"></a>7. Markdown 高级（待更新）</h3>]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 入门自学文档</title>
    <url>/2022/03/16/Python-%E5%85%A5%E9%97%A8%E8%87%AA%E5%AD%A6%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h1 id="Python-入门自学文档"><a href="#Python-入门自学文档" class="headerlink" title="Python 入门自学文档"></a>Python 入门自学文档</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>Python 是一种易于学习又功能强大的编程语言。它提供了高效的高级数据结构，还能简单有效地面向对象编程。Python 优雅的语法和动态类型，以及解释型语言的本质，使它成为多数平台上写脚本和快速开发应用的理想语言。</li>
</ul>
<span id="more"></span>

<ul>
<li><p>Python 解释器及丰富的标准库，提供了适用于各个主要系统平台的源码或机器码，这些可以到 <a href="https://www.python.org/">Python 官网</a>免费获取，并可自由地分发。许多免费的第三方 Python 模块、程序、工具和它们的文档，也能在这个网站上找到对应内容或链接。</p>
</li>
<li><p>Python 解释器易于扩展，可以使用 C 或 C++（或者其他可以通过 C 调用的语言）扩展新的功能和数据类型。Python 也可用于可定制化软件中的扩展程序语言。</p>
</li>
<li><p>有关标准的对象和模块，请参阅 <a href="https://docs.python.org/zh-cn/3/library/index.html#library-index">Python 标准库</a>。<a href="https://docs.python.org/zh-cn/3/reference/index.html#reference-index">Python 语言参考手册</a> 提供了更正式的语言定义。想要编写 C 或者 C++ 扩展可以参考 <a href="https://docs.python.org/zh-cn/3/extending/index.html#extending-index">扩展和嵌入 Python 解释器</a> 和 <a href="https://docs.python.org/zh-cn/3/c-api/index.html#c-api-index">Python&#x2F;C API 参考手册</a>。另外还有不少书籍深入讲解 Python。</p>
<p><strong><em>注：本人自学参考视频 <a href="https://www.bilibili.com/video/BV1vA411b7Rn?p=11&spm_id_from=pageDriver">b 站求知学堂</a>，<a href="https://www.runoob.com/python3/python3-tutorial.html">Python3 菜鸟教程</a> 以及 <a href="https://docs.python.org/zh-cn/3/">Python 中文开发文档 3.9.2</a></em></strong></p>
</li>
</ul>
<p><strong>Python 安装与使用待有空更新</strong></p>
<hr>
<h1 id="1-Python3-基础语法"><a href="#1-Python3-基础语法" class="headerlink" title="1.Python3 基础语法"></a>1.Python3 基础语法</h1><h2 id="1-1-编码"><a href="#1-1-编码" class="headerlink" title="1.1 编码"></a>1.1 编码</h2><p>默认情况下，Python 3 源码文件以 <strong>UTF-8</strong> 编码，所有字符串都是 unicode 字符串。 当然你也可以为源码文件指定不同的编码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: cp-1252 -*-</span><br></code></pre></td></tr></table></figure>

<h2 id="1-2-标识符"><a href="#1-2-标识符" class="headerlink" title="1.2 标识符"></a>1.2 标识符</h2><ul>
<li>第一个字符必须是字母表中字母或下划线 <strong>_</strong> 。</li>
<li>标识符的其他的部分由字母、数字和下划线组成。</li>
<li>标识符对大小写敏感。</li>
</ul>
<p>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。</p>
<hr>
<h2 id="1-3python-保留字"><a href="#1-3python-保留字" class="headerlink" title="1.3python 保留字"></a>1.3python 保留字</h2><p>保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> keyword<br><span class="hljs-meta">&gt;&gt;&gt; </span>keyword.kwlist<br>[<span class="hljs-string">&#x27;False&#x27;</span>, <span class="hljs-string">&#x27;None&#x27;</span>, <span class="hljs-string">&#x27;True&#x27;</span>, <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;as&#x27;</span>, <span class="hljs-string">&#x27;assert&#x27;</span>, <span class="hljs-string">&#x27;break&#x27;</span>, <span class="hljs-string">&#x27;class&#x27;</span>, <span class="hljs-string">&#x27;continue&#x27;</span>, <span class="hljs-string">&#x27;def&#x27;</span>, <span class="hljs-string">&#x27;del&#x27;</span>, <span class="hljs-string">&#x27;elif&#x27;</span>, <span class="hljs-string">&#x27;else&#x27;</span>, <span class="hljs-string">&#x27;except&#x27;</span>, <span class="hljs-string">&#x27;finally&#x27;</span>, <span class="hljs-string">&#x27;for&#x27;</span>, <span class="hljs-string">&#x27;from&#x27;</span>, <span class="hljs-string">&#x27;global&#x27;</span>, <span class="hljs-string">&#x27;if&#x27;</span>, <span class="hljs-string">&#x27;import&#x27;</span>, <span class="hljs-string">&#x27;in&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;lambda&#x27;</span>, <span class="hljs-string">&#x27;nonlocal&#x27;</span>, <span class="hljs-string">&#x27;not&#x27;</span>, <span class="hljs-string">&#x27;or&#x27;</span>, <span class="hljs-string">&#x27;pass&#x27;</span>, <span class="hljs-string">&#x27;raise&#x27;</span>, <span class="hljs-string">&#x27;return&#x27;</span>, <span class="hljs-string">&#x27;try&#x27;</span>, <span class="hljs-string">&#x27;while&#x27;</span>, <span class="hljs-string">&#x27;with&#x27;</span>, <span class="hljs-string">&#x27;yield&#x27;</span>]<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="1-4Python-中的注释"><a href="#1-4Python-中的注释" class="headerlink" title="1.4Python 中的注释"></a>1.4Python 中的注释</h2><p><strong>Python 中单行注释以“ # ” 开头，实例如下：</strong>(<em>实例全以 python3.0 以上版本为准</em>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-comment"># 第一个注释</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Hello, Python!&quot;</span>) <span class="hljs-comment"># 第二个注释</span><br></code></pre></td></tr></table></figure>

<p>执行以上代码，输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">Hello, Python!<br></code></pre></td></tr></table></figure>

<p>多行注释可以用多个 <strong>#</strong> 号，还有 <strong>‘’’</strong> 和 **”””**：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python3</span><br><br><span class="hljs-comment"># 第一个注释</span><br><span class="hljs-comment"># 第二个注释</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">第三注释</span><br><span class="hljs-string">第四注释</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">第五注释</span><br><span class="hljs-string">第六注释</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Hello, Python!&quot;</span>)<br></code></pre></td></tr></table></figure>

<p>执行以上代码，输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">Hello, Python<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="1-5-行与缩进"><a href="#1-5-行与缩进" class="headerlink" title="1.5 行与缩进"></a>1.5 行与缩进</h2><p>python 最具特色的就是使用缩进来表示代码块，不需要使用大括号 <strong>{}</strong> 。</p>
<p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;True&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;False&quot;</span>)<br></code></pre></td></tr></table></figure>

<p>执行以上代码，输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure>

<p>以下代码最后一行语句缩进数的空格数不一致，会导致运行错误：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Answer&quot;</span>)<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;True&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Answer&quot;</span>)<br>  <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;False&quot;</span>)    <span class="hljs-comment"># 缩进不一致，会导致运行错误</span><br></code></pre></td></tr></table></figure>

<p>则显示 <strong>IndentationError: unindent does not match any outer indentation level</strong></p>
<p><img src="https://i.bmp.ovh/imgs/2022/03/3f7128a0e008b0df.png" alt="报错信息"></p>
<p><strong>若不同的代码块的语句缩进不同</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-literal">True</span>:<br>    	<span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;True&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;False&quot;</span>)<br></code></pre></td></tr></table></figure>

<p>执行以上代码，输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Answer&quot;</span>)<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;True&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Answer&quot;</span>)<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;False&quot;</span>)<br></code></pre></td></tr></table></figure>

<p>执行以上代码，输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">Answer<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure>

<p><strong>则不会导致运行错误</strong></p>
<hr>
<h2 id="1-6-多行语句"><a href="#1-6-多行语句" class="headerlink" title="1.6 多行语句"></a>1.6 多行语句</h2><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠()来实现多行语句，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">total = item_one + \<br>        item_two + \<br>        item_three<br></code></pre></td></tr></table></figure>

<p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠()，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">total = [<span class="hljs-string">&#x27;item_one&#x27;</span>, <span class="hljs-string">&#x27;item_two&#x27;</span>, <span class="hljs-string">&#x27;item_three&#x27;</span>,<br>        <span class="hljs-string">&#x27;item_four&#x27;</span>, <span class="hljs-string">&#x27;item_five&#x27;</span>]<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="1-7-数字-Number-类型"><a href="#1-7-数字-Number-类型" class="headerlink" title="1.7 数字(Number)类型"></a>1.7 数字(Number)类型</h2><p>python 中数字有四种类型：整数、布尔型、浮点数和复数。</p>
<ul>
<li><strong>int</strong> (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li>
<li><strong>bool</strong> (布尔), 如 True。</li>
<li><strong>float</strong> (浮点数), 如 1.23、3E-2</li>
<li><strong>complex</strong> (复数), 如 1 + 2j、 1.1 + 2.2j</li>
</ul>
<hr>
<h2 id="1-8-字符串-String"><a href="#1-8-字符串-String" class="headerlink" title="1.8 字符串(String)"></a>1.8 字符串(String)</h2><ul>
<li>python 中单引号和双引号使用完全相同。</li>
<li>使用三引号(‘’’或”””)可以指定一个多行字符串。</li>
<li>转义符 ‘&#39;</li>
<li>反斜杠可以用来转义，使用 r 可以让反斜杠不发生转义。。 如 r”this is a line with \n” 则\n 会显示，并不是换行。</li>
<li>按字面意义级联字符串，如”this “ “is “ “string”会被自动转换为 this is string。</li>
<li>字符串可以用 + 运算符连接在一起，用 * 运算符重复。</li>
<li>Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。</li>
<li>Python 中的字符串不能改变。</li>
<li>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</li>
<li>字符串的截取的语法格式如下：<strong>变量[头下标:尾下标:步长]</strong></li>
</ul>
<p><strong>例一：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">word = <span class="hljs-string">&#x27;字符串&#x27;</span><br>sentence = <span class="hljs-string">&quot;这是一个句子。&quot;</span><br>paragraph = <span class="hljs-string">&quot;&quot;&quot;这是一个段落，</span><br><span class="hljs-string">可以由多行组成&quot;&quot;&quot;</span><br><span class="hljs-built_in">print</span>(word)<br><span class="hljs-built_in">print</span>(sentence)<br><span class="hljs-built_in">print</span>(paragraph)<br></code></pre></td></tr></table></figure>

<p>执行以上代码，输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">字符串<br>这是一个句子。<br>这是一个段落，<br>可以由多行组成<br></code></pre></td></tr></table></figure>

<p><strong>例二:</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>=<span class="hljs-string">&#x27;Runoob&#x27;</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>)                 <span class="hljs-comment"># 输出字符串</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>])           <span class="hljs-comment"># 输出第一个到倒数第二个的所有字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>])              <span class="hljs-comment"># 输出字符串第一个字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>])            <span class="hljs-comment"># 输出从第三个开始到第五个的字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">2</span>:])             <span class="hljs-comment"># 输出从第三个开始后的所有字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">1</span>:<span class="hljs-number">5</span>:<span class="hljs-number">2</span>])          <span class="hljs-comment"># 输出从第二个开始到第五个且每隔两个的字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span> * <span class="hljs-number">2</span>)             <span class="hljs-comment"># 输出字符串两次</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span> + <span class="hljs-string">&#x27;你好&#x27;</span>)         <span class="hljs-comment"># 连接字符串</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;------------------------------&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;hello\nrunoob&#x27;</span>)      <span class="hljs-comment"># 使用反斜杠(\)+n转义特殊字符</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">r&#x27;hello\nrunoob&#x27;</span>)     <span class="hljs-comment"># 在字符串前面添加一个 r，表示原始字符串，不会发生转义</span><br></code></pre></td></tr></table></figure>

<p>执行以上代码，输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">Runoob<br>Runoo<br>R<br>noo<br>noob<br>uo<br>RunoobRunoob<br>Runoob你好<br>------------------------------<br>hello<br>runoob<br>hello\nrunoob<br></code></pre></td></tr></table></figure>

<p>**<em>这里的 r 指 raw，即 raw string，会自动将反斜杠转义</em>**，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)       <span class="hljs-comment"># 输出空行</span><br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-string">r&#x27;\n&#x27;</span>)      <span class="hljs-comment"># 输出 \n</span><br>\n<br>&gt;&gt;&gt;<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="1-9-空行"><a href="#1-9-空行" class="headerlink" title="1.9 空行"></a>1.9 空行</h2><p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p>
<p>空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p>
<p><strong>记住：</strong>空行也是程序代码的一部分。</p>
<hr>
<h2 id="1-10-等待用户输入"><a href="#1-10-等待用户输入" class="headerlink" title="1.10 等待用户输入"></a>1.10 等待用户输入</h2><p>执行下面的程序在按回车键后就会等待用户输入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\n\n按下 enter 键后退出。&quot;</span>)<br></code></pre></td></tr></table></figure>

<p><strong><em>注：以上代码中 ，”\n\n”在结果输出前会输出两个新的空行。一旦用户按下 enter 键时，程序将退出。</em></strong></p>
<hr>
<h2 id="1-11-同一行显示多条语句"><a href="#1-11-同一行显示多条语句" class="headerlink" title="1.11 同一行显示多条语句"></a>1.11 同一行显示多条语句</h2><p>Python 可以在同一行中使用多条语句，语句之间使用分号(;)分割，以下是一个简单的实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys; x = <span class="hljs-string">&#x27;runoob&#x27;</span>; sys.stdout.write(x + <span class="hljs-string">&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure>

<p>执行脚本以上代码，输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">runoob<br></code></pre></td></tr></table></figure>

<p>使用交互式命令行执行，输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">runoob<br><span class="hljs-number">7</span><br></code></pre></td></tr></table></figure>

<p><strong><em>此处的 7 表示字符数。</em></strong></p>
<hr>
<h2 id="1-12-多个语句构成代码组"><a href="#1-12-多个语句构成代码组" class="headerlink" title="1.12 多个语句构成代码组"></a>1.12 多个语句构成代码组</h2><p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p>
<p>像 if、while、def 和 class 这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p>
<p>我们将首行及后面的代码组称为一个子句(clause)。</p>
<p>如下实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> expression :<br>   suite<br><span class="hljs-keyword">elif</span> expression :<br>   suite<br><span class="hljs-keyword">else</span> :<br>   suite<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="1-13print-输出"><a href="#1-13print-输出" class="headerlink" title="1.13print 输出"></a>1.13print 输出</h2><p><strong>print</strong> 默认输出是换行的，如果要实现不换行需要在变量末尾加上 **end&#x3D;””**：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">x=<span class="hljs-string">&quot;a&quot;</span><br>y=<span class="hljs-string">&quot;b&quot;</span><br><span class="hljs-comment"># 换行输出</span><br><span class="hljs-built_in">print</span>( x )<br><span class="hljs-built_in">print</span>( y )<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;---------&#x27;</span>)<br><span class="hljs-comment"># 不换行输出</span><br><span class="hljs-built_in">print</span>( x, end=<span class="hljs-string">&quot; &quot;</span> )<br><span class="hljs-built_in">print</span>( y, end=<span class="hljs-string">&quot; &quot;</span> )<br><span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure>

<p>执行以上代码，输出结果为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a<br>b<br>---------<br>a b<br></code></pre></td></tr></table></figure>

<hr>
<h2 id="1-14import-与-from…import"><a href="#1-14import-与-from…import" class="headerlink" title="1.14import 与 from…import"></a>1.14import 与 from…import</h2><p>在 python 用 <strong>import</strong> 或者 <strong>from…import</strong> 来导入相应的模块。</p>
<p>将整个模块(somemodule)导入，格式为： <strong>import somemodule</strong></p>
<p>从某个模块中导入某个函数,格式为： <strong>from somemodule import somefunction</strong></p>
<p>从某个模块中导入多个函数,格式为： <strong>from somemodule import firstfunc, secondfunc, thirdfunc</strong></p>
<p>将某个模块中的全部函数导入，格式为： <strong>from somemodule import *</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys				<span class="hljs-comment">#导入sys模块</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;================Python import mode==========================&#x27;</span>)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;命令行参数为:&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> sys.argv:<br>    <span class="hljs-built_in">print</span> (i)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;\n python 路径为&#x27;</span>,sys.path)<br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> argv,path				<span class="hljs-comment">#导入特定的成员</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;================python from import===================================&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;path:&#x27;</span>,path) <span class="hljs-comment"># 因为已经导入path成员，所以此处引用时不需要加sys.path</span><br></code></pre></td></tr></table></figure>

<hr>
<h2 id="1-15-命令行参数"><a href="#1-15-命令行参数" class="headerlink" title="1.15 命令行参数"></a>1.15 命令行参数</h2><p>很多程序可以执行一些操作来查看一些基本信息，Python 可以使用-h 参数查看各参数帮助信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">$ python -h<br>usage: python [option] ... [-c cmd | -m mod | file | -] [arg] ...<br>Options <span class="hljs-keyword">and</span> arguments (<span class="hljs-keyword">and</span> corresponding environment variables):<br>-c cmd : program passed <span class="hljs-keyword">in</span> <span class="hljs-keyword">as</span> string (terminates option <span class="hljs-built_in">list</span>)<br>-d     : debug output <span class="hljs-keyword">from</span> parser (also PYTHONDEBUG=x)<br>-E     : ignore environment variables (such <span class="hljs-keyword">as</span> PYTHONPATH)<br>-h     : <span class="hljs-built_in">print</span> this <span class="hljs-built_in">help</span> message <span class="hljs-keyword">and</span> exit<br><br>[ etc. ]<br></code></pre></td></tr></table></figure>

<p><strong><em>我们在使用脚本形式执行 Python 时，可以接收命令行输入的参数，具体使用可以参照 <a href="https://www.runoob.com/python3/python3-command-line-arguments.html">Python 3 命令行参数</a>。</em></strong></p>
]]></content>
      <tags>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/03/16/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>《霍乱时期的爱情》（上）</title>
    <url>/2022/03/20/%E3%80%8A%E9%9C%8D%E4%B9%B1%E6%97%B6%E6%9C%9F%E7%9A%84%E7%88%B1%E6%83%85%E3%80%8B%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    <content><![CDATA[<h2 id="书籍推荐-——-《霍乱时期的爱情》（上）"><a href="#书籍推荐-——-《霍乱时期的爱情》（上）" class="headerlink" title="书籍推荐 —— 《霍乱时期的爱情》（上）"></a>书籍推荐 —— 《霍乱时期的爱情》（上）</h2><hr>
<h3 id="作者简介："><a href="#作者简介：" class="headerlink" title="作者简介："></a>作者简介：</h3><p><strong>《霍乱时期的爱情》</strong>是哥伦比亚作家<strong>加夫列尔·加西亚·马尔克斯（后文简称马尔克斯）</strong>的作品，其经典代表作是<strong>《百年孤独》</strong>，并在 1982 年获得诺贝尔文学奖。</p>
<span id="more"></span>

<hr>
<h3 id="小说梗概："><a href="#小说梗概：" class="headerlink" title="小说梗概："></a>小说梗概：</h3><p>小说的主角是<strong>弗洛伦蒂诺·阿里萨</strong>和<strong>费尔明娜·达萨</strong>。<strong>弗洛伦蒂诺</strong>和<strong>费尔明娜</strong>年轻时就坠入爱河。在<strong>费尔明娜</strong>的姑妈<strong>弗朗西斯卡</strong>的帮助下，两人之间形成了一种秘密关系。他们交换情书。但是<strong>费尔明娜</strong>的父亲<strong>洛伦佐·达萨</strong>在不久后发现了两人之间的关系，<strong>洛伦佐</strong>就开始强迫女儿、立即停止去见<strong>弗洛伦蒂诺</strong>，却被女儿拒绝。</p>
<p>于是<strong>洛伦佐</strong>为了让女儿能忘记<strong>弗洛伦蒂诺</strong>，他强迫自己的女儿一起出去旅游。不过无论距离如何，<strong>费尔明娜</strong>和<strong>弗洛伦蒂诺</strong>继续通过电报进行通信。而当<strong>费尔明娜</strong>再次见到<strong>弗洛伦蒂诺</strong>时，<strong>费尔明娜</strong>却“惊慌地自问，怎么会如此残酷地让那样一个幻影在自己的心间占据了那么长时间”，并中断了与<strong>弗洛伦蒂诺</strong>的订婚，并归还了他所有的信。</p>
<p>一个年轻而有成就的民族英雄<strong>胡维纳尔·乌尔比诺医生</strong>遇见了<strong>费尔明娜</strong>，开始讨好她。尽管费尔明娜最初不喜欢乌尔比诺医生，但费尔明娜最后还是屈从于她父亲的劝说以及乌尔比诺提供的安全和财富，他们最终还是在一起了。</p>
<p>即使在<strong>费尔明娜</strong>与<strong>乌尔比诺</strong>订婚和结婚之后，<strong>弗洛伦蒂诺</strong>也发誓要保持忠诚，等待着<strong>费尔明娜</strong>。然而<strong>弗洛伦蒂诺</strong>开始利用放纵的生活来排遣分离的空虚。与此同时，<strong>费尔明娜</strong>和<strong>乌尔比诺</strong>医生一起变老，经历了漫长岁月，经历了婚姻的所有的现实。在结婚多年后，<strong>乌尔比诺</strong>医生向<strong>费尔明娜</strong>坦白了一段婚外恋，最终证明他并不是一个完全忠实的丈夫。不过直到<strong>乌尔比诺</strong>医生离世前他们依然还维系着这已经破碎的婚姻…</p>
<p>多年之后，老年<strong>乌尔比诺</strong>医生试图把他的宠物鹦鹉从芒果树上捉出来，结果却从梯子上摔下死去。葬礼结束后，<strong>弗洛伦蒂诺</strong>再次向<strong>费尔明娜</strong>示爱，向她重申了他永恒的忠诚和不渝的爱情。渐渐的<strong>弗洛伦蒂诺</strong>慢慢地通过自己的文字消弭了两人之间的隔膜。在一次船上的旅行中，年迈的一对发现自己重坠爱河。<strong>费尔明娜</strong>担心这桩情事可能引起的丑闻，于是船长升起了一面向代表霍乱流行的黄旗，护送着这自我放逐但永远不分离的爱情。</p>
<hr>
<h3 id="创作背景："><a href="#创作背景：" class="headerlink" title="创作背景："></a>创作背景：</h3><p><strong>《霍乱时期的爱情》</strong>创作的直接起源，是<strong>马尔克斯</strong>在报纸上看到了一则新闻：一对来到四十年前的故地，重温蜜月旅行的老人，竟被载他们出游的船夫用桨打死了，为的是抢走他们身上带的钱。他们是一对秘密情人，四十年来一直一起度假，但各自都有幸福而稳定的婚姻，而且子孙满堂这个故事与父母年轻时候的爱情故事杂糅在一起，为作家笔下的虚构小说奠定了时间跨度与张力结构，但是，<strong>马尔克斯</strong>更为重要的创作契机源自于他个人对爱情的理解和对拉美文化的认识。</p>
<p><strong>马尔克斯</strong>在小说里也呈现了这个故事</p>
<p>“通过这个电台，她听到一则令人心碎的消息：一对来到四十年前的故地重温蜜月旅行的老人，竟被载他们出游的船夫用桨打死了，为的是抢走他们身上带的钱：十四美元。当卢克雷西娅·德尔雷亚尔把刊登在本地一份报纸上的整件事情的始末讲给她听时，她的感触更深了。警察发现两个老人是被活活打死的，女的七十八岁，男的八十四岁。他们是一对秘密情人，四十年来一直一起度假，但各自都有幸福而稳定的婚姻，而且子孙满堂。听小说连播时从未落过泪的费尔明娜·达萨，此刻却不得不强忍住哽在喉头的泪水。”</p>
<hr>
<h3 id="故事原型："><a href="#故事原型：" class="headerlink" title="故事原型："></a>故事原型：</h3><p><strong>而小说中弗洛伦蒂诺追求费尔明娜的故事则是马尔克斯父母的爱情故事原型，不同的是马尔克斯的父亲最终打动了岳父，而并非在小说里那样等待了“五十三年七月零十一天”：</strong></p>
<p>“<strong>马尔克斯</strong>在小说创作期间，曾多次同自己的父母进行过交谈，他是在计划写一部反映他们生活的小说。故事是从<strong>马尔克斯</strong>的父亲开始的。他的父亲<strong>加夫列尔·埃里希奥·加西亚·马丁内斯</strong>是一个报务员、诗人和小提琴者，在他所属的阶级里，他是一个很受欢迎的年轻人，就像小说里的<strong>弗洛伦蒂诺</strong>一样。一个偶然的机会，他来到年迈的马尔克斯上校家里，并且爱上了上校的女儿。1925 年 3 月一个炎热的下午，在马尔克斯上校家一颗扁桃树的绿阴下，他向这位叫做<strong>路易莎</strong>的漂亮姑娘透露心迹，说自己因她而睡不着，他心里没有别的女人，一定要娶她为妻，甚至要即刻和她成亲；只给她二十四小时的考虑时间。</p>
<p>然而姑娘未能做出任何回答，因为在这时候她的姑妈<strong>弗朗西斯卡·西莫多塞阿·梅希亚</strong>朝扁桃树下走来。她即是<strong>《霍乱时期的爱情》</strong>中<strong>埃斯科拉斯蒂卡·达萨</strong>姑妈的原型。<strong>加夫列尔</strong>给她取了一个“刻尔柏洛斯”的绰号，因为她形影不离地看着外甥女，成了所有想追求<strong>路易莎</strong>的小伙子的灾星。但<strong>路易莎</strong>最终还是偷偷答应了<strong>加夫列尔</strong>的求婚。</p>
<p>得知女儿私定终身，<strong>马尔克斯上校</strong>气得不许<strong>加夫列尔</strong>再登自己的家门。但这对年轻的情侣想尽一切办法保持联系。于是<strong>加夫列尔</strong>的胆子越来越大，开始在窗下为爱人演奏小夜曲——就像<strong>弗洛伦蒂诺</strong>为<strong>费尔明娜</strong>所做的那样。<strong>路易莎</strong>的双亲觉得只有遥远的距离才能连根铲除年轻人炽热的恋情。于是就像小说中的<strong>洛伦索·达萨</strong>那样举家搬迁。但是，<strong>加夫列尔</strong>没有服输。他定下了更为高明的策略，在<strong>路易莎</strong>沿途经过的城镇的报务员们的配合下，两人通过电报进行密切联系。正是<strong>加夫列尔·埃里希奥</strong>的爱情故事，六十年后启发他的儿子创作出<strong>《霍乱时期的爱情》</strong>。他们之间的爱情故事本身就富有传奇色彩，即使原封不动，也是可读性非常强的文学作品。但马尔克斯并不就此止步，他又加入了另外一些人的爱情故事，包括他自己的爱情故事……”</p>
]]></content>
      <tags>
        <tag>书籍推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>油画背后的故事——《Lady Godiva》</title>
    <url>/2022/03/22/%E6%B2%B9%E7%94%BB%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%85%E4%BA%8B%E2%80%94%E2%80%94%E3%80%8ALady-Godiva%E3%80%8B/</url>
    <content><![CDATA[<h3 id="油画背后的故事——《Lady-Godiva》"><a href="#油画背后的故事——《Lady-Godiva》" class="headerlink" title="油画背后的故事——《Lady Godiva》"></a>油画背后的故事——《Lady Godiva》</h3><hr>
<div align="center">
<img src="https://img1.imgtp.com/2022/03/22/2NFEpO2g.jpg" width="500px" height="XXX"  />
</div>
<div align="center">
约翰·科利尔（John Collier）的《戈迪瓦夫人》（Lady Godiva），约1897年
</div>

<span id="more"></span>

<hr>
<h4 id="故事背景："><a href="#故事背景：" class="headerlink" title="故事背景："></a>故事背景：</h4><p>根据故事的最经典的版本，考文垂的人民在<strong>Leofric 伯爵</strong>的压迫税收下民生凋敝，伯爵的夫人<strong>Godiva</strong>因为怜悯生活在考文垂的人民一次又一次地向她的丈夫提出上诉，<strong>伯爵</strong>顽固地拒绝降低税收。最后，<strong>伯爵</strong>厌倦了她的恳求，他说，如果<strong>Godiva 夫人</strong>脱光衣服，骑着马穿过镇上的街道，<strong>伯爵</strong>会答应她的请求。<strong>Godiva 夫人</strong>听信了他的诺言，便让所有人都留在屋内并关上窗户后，<strong>Godiva 夫人</strong>便脱光衣服骑着白马穿过城镇。不过镇上有个叫<strong>Tom</strong>的裁缝违背了诺言，悄悄地偷窥<strong>Godiva 夫人</strong>。后来<strong>伯爵</strong>被她妻子的行为打动了，便宣布降低税收。</p>
<hr>
<h4 id="故事背后："><a href="#故事背后：" class="headerlink" title="故事背后："></a>故事背后：</h4><ol>
<li>传说偷窥 Godiva 夫人的 Tom 后来被打瞎了眼睛。</li>
<li>一位叫 Thomas Pennant 的作家在书中《_Journey from Chester to London_》写道 Godiva 夫人并非完全全裸而是穿了一件紧贴她身体的丝绸，丝绸的颜色与她的皮肤相似。</li>
<li>虽然传说的大多数都描述了 Godiva 骑车完全裸体，但对于这一概念的历史真实性存在很多争议。有些人认为，裸体神话起源于清教徒的宣传，旨在抹黑虔诚的 Godiva 夫人的声誉。11 世纪和 12 世纪的编年史家提到 Godiva 夫人是一位受人尊敬的宗教女性，十分美丽，却没有提到她裸体穿越街道。</li>
</ol>
]]></content>
      <tags>
        <tag>油画</tag>
      </tags>
  </entry>
  <entry>
    <title>电影细读  ——  “第九区”</title>
    <url>/2022/03/22/%E7%94%B5%E5%BD%B1%E7%BB%86%E8%AF%BB-%E2%80%94%E2%80%94-%E2%80%9C%E7%AC%AC%E4%B9%9D%E5%8C%BA%E2%80%9D/</url>
    <content><![CDATA[<h3 id="电影细读-——-“第九区”"><a href="#电影细读-——-“第九区”" class="headerlink" title="电影细读 —— “第九区”"></a>电影细读 —— “第九区”</h3><hr>
<h4 id="电影介绍："><a href="#电影介绍：" class="headerlink" title="电影介绍："></a>电影介绍：</h4><p>影片<strong>《第九区》</strong>是在 2009 年上映的科幻电影，由<strong>尼尔·布洛姆坎普</strong>导演。当时导演还没满 30 岁。在此之前导演曾在自己制作的科幻短片中崭露头角。影片就是从其中的《约堡外星人》改编而成。这几部科幻短片虽然反响不大，但获得了<strong>彼得·杰克逊</strong>赏识，当时选了<strong>尼尔·布洛姆坎普</strong>当《光环》的导演。后来因为诸公司的商业利益，《光环》计划被搁置。这使得彼得·杰克逊自掏腰包让<strong>尼尔·布洛姆坎普</strong>拍一部自己想拍的电影。一部让好莱坞科幻界感到羞耻的电影就这样诞生了。接着影片提名了五项奥斯卡，影片最终收获了 1.2 亿美元的票房成绩。<strong>尼尔·布洛姆坎普</strong>一举成名，这片以南非种族歧视的背景的以人性为题材的电影拉开了帷幕。</p>
<span id="more"></span>

<hr>
<h4 id="电影叙述："><a href="#电影叙述：" class="headerlink" title="电影叙述："></a>电影叙述：</h4><p>影片采用<strong>半伪纪录片</strong>的形式，记录了主人公<strong>威格斯</strong>的故事。他是 MNU 的一名文职人员，MNU 是一家政府指派的执行控制和管理外星人的一家私人公司。他有一个和睦的家庭，而且岳父是 MNU 高管。威格斯则负责与外星人沟通交流。片中并没有详细的介绍外星飞船是如何来的，只从出现的那一刻就一直停在空中。接着人类的好奇心打破了这僵局，进入飞船一探究竟，结果不过是一群外星人难民，人类给出了一块地收留这些外星难民——<strong>“第九区”</strong>。人类发现外星人喜欢吃腐食，长相像一只巨大的虾，所以给他们取名为<strong>大虾</strong>。他们在南非住了 20 多年，性格易怒，经常干违法犯罪的事情。这也导致冲突不断，政府决定将第九区的外星人移到远离城市的地方。MNU 接受了这份工作，开始暴力驱逐大虾们。当然为了维持人类社会的平静，他们派出主人公<strong>威格斯</strong>与<strong>库巴斯</strong>作为行动的指挥官，但心狠手辣的<strong>库巴斯</strong>却丝毫不给面子。他用军队的力量暴力驱逐，这也是 MNU 公司想要的。在现场还有一大批人类的人权组织呼吁要善待大虾。在这时讲道理的<strong>威格斯</strong>想要去说服大虾们，但始终不得已。镜头给到第九区里的黑帮。黑帮用大虾爱吃的猫粮去换去外星人的武器或者钱。尽管他们有超越人类的高科技武器，但武器和外星 DNA 是锁定的，人类无法使用。影片中大虾们都没用过武器，大虾们的群体结构就像蚂蚁一样，领导者不在了，他们就不过是一群没有脑子的工蚁罢了。接着<strong>威格斯</strong>来到了一间民房中，随手找到了一个<strong>红背心</strong>外星人藏起来的试管，结果操作不当被溅了一脸。随后<strong>威格斯</strong>的身体开始慢慢发生变化，他的手指甲开始脱落，还吐出一堆黑血。他被送往了医院，但随即被 MNU 公司抓住去做实验。在此期间，<strong>威格斯</strong>一次又一次被要求使用外星武器杀死实验外星人，公司对此很满意。于是计划解剖<strong>威格斯</strong>，但他最后跑了出来，他四处躲避，但不会有人信任他。<strong>威格斯</strong>只好躲在第九区里。他想砍下了已经变成外星人的手，但疼痛却让他止步，随后<strong>威格斯</strong>回到那个让他变异成外星人的平房，<strong>威格斯</strong>向<strong>红背心</strong>外星人求救后随即晕了过去。醒后，<strong>威格斯</strong>发现<strong>红背心</strong>外星人是为数不多的智慧派，<strong>红背心</strong>答应他让他变回人类，不过得进 MNU 公司拿回一些试管。于是<strong>威格斯</strong>孤身一人去找黑帮谈生意，但钟爱力量的黑帮老大看上了这份令<strong>威格斯</strong>恐惧的身体。威格斯带着武器逃了出来但也和黑帮老大结下了恩怨。<strong>红背心</strong>永远都忘记不了那惨绝人寰的实验室，他觉得先去搬救兵，并让<strong>威格斯</strong>等他 3 年，<strong>威格斯</strong>一气之下击昏<strong>红背心</strong>，打算进入飞船内部但随即被黑帮老大抓住。在他马上就要被黑帮老大肢解吃掉前，在旁边的外星机甲保护了他。他开着机甲，想要离开这是非之地。接着<strong>威格斯</strong>看见<strong>库巴斯</strong>与<strong>红背心</strong>在撕斗，但他一开始却落荒而逃了，可当他听见<strong>库巴斯</strong>把打算杀死<strong>红背心</strong>。<strong>威格斯</strong>跑了回去，赌上自己的性命也要带着<strong>红背心</strong>回到飞船。到了影片的高潮部分了，<strong>威格斯</strong>一路血战，终于等到<strong>红背心</strong>上了飞船。看着飞船渐渐离去，<strong>威格斯</strong>露出复杂的笑容。故事结尾，大虾们搬进了<strong>“第十区”</strong>，他们也在忍气吞声着盼望着有朝一日能回家。</p>
<p>除了主线，还有一条支线，是关于<strong>威格斯</strong>的与他妻子的爱情线。他们一直深爱着彼此。但三年是漫长的。片中最精彩的地方就是在于威格斯性格转变，不过这是迫于生理改变而发生变化的。他由原本的瞧不起大虾，到最后与大虾为伍。尽管都在意料之中但续写方法却让人料想不到。</p>
<hr>
<h4 id="主题："><a href="#主题：" class="headerlink" title="主题："></a>主题：</h4><ul>
<li><p>与故事片所基于的短片_<a href="https://en.m.wikipedia.org/wiki/Alive_in_Joburg">《活着在约堡》</a>一样，<strong>第 9 区</strong>的背景受到<strong>种族隔离</strong>时代历史事件的启发，特别是暗指<a href="https://en.m.wikipedia.org/wiki/Cape_Town" title="Cape Town">开普敦</a>市中心的住宅区<a href="https://en.m.wikipedia.org/wiki/District_Six" title="District Six">第六区</a>，于 1966 年被政府宣布为”仅限白人”的地区，有 60，000 人被强行转移到<a href="https://en.m.wikipedia.org/wiki/Cape_Flats" title="Cape Flats">Cape Flats</a>， 距离 25 公里（16 英里）远。</p>
</li>
<li><p>这部电影强调了 Wikus 的讽刺意味以及他的经历对他性格的影响，这表明他变得越来越人性化，因为他在生物学上变得不那么人性化。夏威夷大学报纸《Ka Leo》的克里斯·迈克塞尔（Chris Mikesell）写道：”在这部电影中，用’黑人’、’亚洲人’、’墨西哥人’、’非法的’犹太人’、’白人’或任何数量的不同标签来代替’虾’这个词，你会听到对话背后隐藏的真相。</p>
</li>
<li><p>种族主义和仇外心理的主题的形式表现出来。用于描述外星人，”虾”一词指的是<a href="https://en.m.wikipedia.org/wiki/Parktown_prawn" title="Parktown prawn">帕克敦虾</a>，一种在南非被视为害虫的国王——蟋蟀物种。</p>
</li>
<li><p><strong>第 9 区</strong>的另一个基本主题是各州依赖跨国公司（作为政府资助的执法形式。由于 MNU 代表了与政府合作的公司类型，因此电影中对 MNU 的负面描述描绘了将军队和官僚机构外包给私人承包商的危险。</p>
</li>
</ul>
<hr>
<h4 id="个人感想："><a href="#个人感想：" class="headerlink" title="个人感想："></a>个人感想：</h4><p>“第九区”采用的伪纪录片的拍摄方法，而且用的手持摄影机，真实感毋庸置疑。无论是前期的主角伪采访，还是战争炮火下抖动的镜头，都能让观众更快的融入这个看似庞大的世界观。许多科幻片不叫好的原因并不是没有一个完整，精彩的故事，而往往是科幻片的世界观不被人理解。而揭示完<strong>“第九区”</strong>的世界观，就正是导演肆意发挥的时候了。电影主要都是围绕受害者“外星大虾们”来拍摄的，从一开始主角乃至大多数人欺负“外星人”，还给他们取了个“大虾”的绰号，从而让观众们看到“外星大虾们”的处境，再到主角逐渐慢慢变成“外星大虾”，主角陷入“外星人”身份与“人类”身份左右两难的处境，他不想变成“外星人”，但没有人是真心帮助他的，即使是身处高管的岳父，也想把他当成实验体。随后主角不得不抛弃身处“人类”的一面，寻求“外星人”的帮助。那些“外星大虾们”并不全是呆头呆脑的，只求苟延残喘生存的，其中还有<strong>“红背心”</strong>那样富有情感的“外星人”。而观众在经历了主角的遭遇后，就更能理解“外星大虾们”所受到的迫害。上面提过，<strong>“第九区”</strong>的背景是收到种族隔离的历史事件的启发。而在电影中，那些<strong>“外星人”</strong>就是那些难民的映射。而这些历史因为很少人相传而被遗忘，很难想象因为先天性肤色的不同，种族的不同，而带来的来自同为人类一员的迫害。世界上还有很多人依然还在遭受着战乱，歧视，等等…。而电影能将他们的故事带给我们，让我们在庆幸自己生活美好的同时，能对那些身处困境的陌生人更多的感同身受。这让我想起一句话</p>
<p><strong>每当你觉得想要批评什么人的时候，你要记住并不是所有人都有你拥有的优势。-《了不起的盖茨比》</strong></p>
]]></content>
      <tags>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>音乐背后的故事  —— “Enchanted”</title>
    <url>/2022/03/21/%E9%9F%B3%E4%B9%90%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%85%E4%BA%8B-%E2%80%94%E2%80%94-%E2%80%9CEnchanted%E2%80%9D/</url>
    <content><![CDATA[<h2 id="音乐背后的故事-——-“Enchanted”"><a href="#音乐背后的故事-——-“Enchanted”" class="headerlink" title="音乐背后的故事 —— “Enchanted”"></a>音乐背后的故事 —— “Enchanted”</h2><hr>
<h4 id="歌曲简介："><a href="#歌曲简介：" class="headerlink" title="歌曲简介："></a>歌曲简介：</h4><p><strong>《Enchanted》</strong>收录于<strong>Taylor.Swift</strong>2010 年 10 月 25 日发行的专辑<strong>《Speak Now》</strong>，同时也是女性香水“Wonderstruck”的主题曲。</p>
<span id="more"></span>

<hr>
<h4 id="背景故事："><a href="#背景故事：" class="headerlink" title="背景故事："></a>背景故事：</h4><p>在一次采访中<strong>Taylor</strong>说这首歌是写给<strong>Adam Young</strong>的，在采访中<strong>Taylor</strong>这样说道：</p>
<p>I wrote ＂Enchanted＂about a guy who I was enchanted to meet , obviously , He was somebody that I had talked to a couple of times on email , and then I was in New York and went to meet him.</p>
<p>I remember just the whole way home thinking ,＂I hope he ‘ s not in love with somebody＂It was just wonderful , that feeling.Like , “ Oh my gosh . who＇s he with ? Does he like me ? Does he like somebody else ? What does it mean ?＂ I got home and he had emailed me and said something like ,＂Sorry Iwas so quiet . I was just wonderstruck meeting you .＂ And so I incorporated the word wonderstruck , into the song as a ,＂ Hey this one ‘ s sorta for you .＂</p>
<p><strong>大概意思是：</strong><br>我写“Enchanted”这首歌是关于一个我很想见到的人，显然，他是我在电子邮件上谈过几次的人，然后我就去纽约去见他。</p>
<p>我记得回家的整个路上都在想，“我希望他没有爱上某人”，那种感觉真是太棒了。就像，“哦，天哪。他和谁在一起？他喜欢我吗？他喜欢 其他人？这是什么意思？”我回到家，他给我发了电子邮件，说，“对不起，我太安静了。我只是很惊讶见到你。 ”所以我把 wonderstruck 这个词加入到这首歌中，“嘿，这个有点适合你。”</p>
<p>采访视频：<a href="https://m.youtube.com/watch?v=xesDcuD1iS8">点击此处</a><br><img src="https://i.bmp.ovh/imgs/2022/03/e9131932612c64eb.png" alt="采访截图"></p>
<hr>
<h4 id="回信…"><a href="#回信…" class="headerlink" title="回信…"></a>回信…</h4><p>后来<strong>Adam Young</strong>发现了专辑中的秘密后就给<strong>Taylor</strong>写了一封信，并在那首<strong>“Enchanted”</strong>中悄悄加了一句<strong>“Oh Taylor I was so enchanted to meet you too”</strong></p>
<p>写给<strong>Taylor</strong>的信：<br><img src="https://i.bmp.ovh/imgs/2022/03/f42edcac9bdfa263.jpg" alt="写给Taylor的信"></p>
<hr>
<h4 id="后续…"><a href="#后续…" class="headerlink" title="后续…"></a>后续…</h4><p>后续<strong>Taylor</strong>没有回信给<strong>Adam</strong>，他们两人后来也没有在公开场合交流，具体他们曾经有没有在一起过一段时光也无人知晓……可能没有在一起的爱情就是最美的爱情吧…？</p>
]]></content>
      <tags>
        <tag>音乐</tag>
      </tags>
  </entry>
</search>
